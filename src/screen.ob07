MODULE screen; (* Модуль предоставляет тип для описания экрана X11 *)

IMPORT SYSTEM,
	out,
	unix;


CONST
	ZPixmap = 2;

TYPE
	TScreen* = POINTER TO RECORD (* Тип экрана с полями для успешной работы *)
		display*	:INTEGER; (* номер оригинального экрана *)
		width*	:INTEGER;
		height*  :INTEGER;
		connectionNr*	:INTEGER;     (* fd of X11 socket *)
		readX11*	:unix.fd_set; (* used by select() timeout on X11 socket *)
		screen*	:INTEGER;
		base*		:INTEGER;
		surface*	:INTEGER;
		gc*		:INTEGER;
		stride*	:INTEGER;  (* width, height, base ptr, stride in bytes, 32-bit RGB *)
		painting*	:BOOLEAN

	END;

VAR
	libX11* :INTEGER;        (* handle to dynamic library *)
   XConnectionNumber :PROCEDURE [linux] (display :INTEGER) :INTEGER;
	XOpenDisplay :PROCEDURE [linux] (name :INTEGER) :INTEGER;
   XCloseDisplay* :PROCEDURE [linux] (display :INTEGER);
   XSynchronize* :PROCEDURE [linux] (display, onoff :INTEGER) :INTEGER;  (* return prev onoff *)
   XCreateWindow* :PROCEDURE [linux] (display, parent_window, x, y, w, h, border_width, depth,
                class, visual, valuemask, attributes :INTEGER) :INTEGER;  (* Window *)
   XDefaultScreen* :PROCEDURE [linux] (display :INTEGER) :INTEGER;
   XDefaultGC* :PROCEDURE [linux] (display, screenNr :INTEGER) :INTEGER;  (* GC *)
   XDisplayWidth* :PROCEDURE [linux] (display, screenNr :INTEGER) :INTEGER;
   XDisplayHeight* :PROCEDURE [linux] (display, screenNr :INTEGER) :INTEGER;
   XDefaultVisual* :PROCEDURE [linux] (display, screenNr :INTEGER) :INTEGER;  (* visual *)
   XDefaultRootWindow* :PROCEDURE [linux] (display :INTEGER) :INTEGER;  (* Window *)
   XDefaultDepth* :PROCEDURE [linux] (display, screenNr :INTEGER) :INTEGER;
   XSelectInput* :PROCEDURE [linux] (display, window, event_mask :INTEGER);
   XMapWindow* :PROCEDURE [linux] (display, window :INTEGER);
   XNextEvent* :PROCEDURE [linux] (display, XEvent_p :INTEGER);
   XPending* :PROCEDURE [linux] (display :INTEGER) :INTEGER;
   XLookupString* :PROCEDURE [linux] (key_event, buffer_return, buflen, keysym_return, status_in_out :INTEGER) :INTEGER;
   XCreateImage* :PROCEDURE [linux] (display, visual, depth, format, offset, data,
                width, height, bitmap_pad, bytes_per_line :INTEGER) :INTEGER; (* ptr to XImage *)
   XPutImage* :PROCEDURE [linux] (display, window, gc, image, sx, sy, dx, dy, w, h :INTEGER);

PROCEDURE New*():TScreen; (* создаёт новый экран *)
	VAR
		screen     :TScreen;
	BEGIN
		NEW(screen);
		screen.display := XOpenDisplay(0);
		IF screen.display = 0 THEN
			out.str ("ERROR: can not open X11 display.");
			out.nl;
			out.exit(1)
		END;
		(* ri := XSynchronize (display, 1); *)
		screen.connectionNr := XConnectionNumber (screen.display);
		ASSERT (screen.connectionNr < unix.FD_SETSIZE);
		NEW (screen.readX11);
		unix.FD_ZERO(screen.readX11);
		unix.FD_SET (screen.connectionNr, screen.readX11);
		screen.screen := XDefaultScreen(screen.display);
		screen.gc := XDefaultGC (screen.display, screen.screen);
		screen.width := XDisplayWidth (screen.display, screen.screen);
		screen.height := XDisplayHeight (screen.display, screen.screen);
		screen.base := unix.malloc (screen.width * screen.height * 4);
		IF screen.base = 0 THEN
			out.formatInt2 ("ERROR: can not allocate screen buffer % x %", screen.width, screen.height); out.nl;
			out.exit(1);
		END;
		screen.stride := screen.width * 4;
		screen.surface := XCreateImage (screen.display,
					XDefaultVisual(screen.display, screen.screen),
					XDefaultDepth (screen.display, screen.screen),
					ZPixmap, 0, screen.base, screen.width, screen.height, 32, 0);
		RETURN screen
	END New;

PROCEDURE SetXLib*(val :INTEGER);
	BEGIN
		libX11 := val
	END SetXLib;

PROCEDURE DisplaySet*(screen :TScreen; display :INTEGER);
	BEGIN
		screen.display := display
	END DisplaySet;

PROCEDURE getSymAdr (lib :INTEGER; name :ARRAY OF CHAR; adr :INTEGER);
	VAR sym :INTEGER;
	BEGIN
			  sym := unix.dlsym (lib, SYSTEM.ADR(name[0]));
			  IF sym = 0 THEN out.formatStr ("error: dlsym: %", name); out.nl END;
			  ASSERT (sym # 0);
			  SYSTEM.PUT (adr, sym)
	END getSymAdr;

PROCEDURE PaintingSet*(screen :TScreen);
	BEGIN 
		screen.painting := TRUE
	END PaintingSet;

PROCEDURE PaintingReset*(screen :TScreen);
	BEGIN 
		screen.painting := FALSE
	END PaintingReset;

PROCEDURE Finish*(screen :TScreen); (* Завершение работы экрана *)
	VAR ri :INTEGER;
	BEGIN
			IF screen.display # 0 THEN
				XCloseDisplay(screen.display);
				DisplaySet(screen, 0)
			END;
			IF libX11 # 0 THEN
				ri := unix.dlclose (libX11);
				SetXLib(0)
			END;
	END Finish;

BEGIN(* Инициализация X11 *)
	libX11 := unix.dlopen (SYSTEM.SADR("libX11.so.6"), unix.RTLD_LAZY);
	ASSERT (libX11 # 0);

	getSymAdr (libX11, "XCloseDisplay", SYSTEM.ADR(XCloseDisplay));
	getSymAdr (libX11, "XSynchronize", SYSTEM.ADR(XSynchronize));
	getSymAdr (libX11, "XCreateWindow", SYSTEM.ADR(XCreateWindow));
	getSymAdr (libX11, "XDefaultScreen", SYSTEM.ADR(XDefaultScreen));
	getSymAdr (libX11, "XDefaultGC", SYSTEM.ADR(XDefaultGC));
	getSymAdr (libX11, "XDisplayWidth", SYSTEM.ADR(XDisplayWidth));
	getSymAdr (libX11, "XDisplayHeight", SYSTEM.ADR(XDisplayHeight));
	getSymAdr (libX11, "XDefaultVisual", SYSTEM.ADR(XDefaultVisual));
	getSymAdr (libX11, "XDefaultRootWindow", SYSTEM.ADR(XDefaultRootWindow));
	getSymAdr (libX11, "XDefaultDepth", SYSTEM.ADR(XDefaultDepth));
	getSymAdr (libX11, "XSelectInput", SYSTEM.ADR(XSelectInput));
	getSymAdr (libX11, "XMapWindow", SYSTEM.ADR(XMapWindow));
	getSymAdr (libX11, "XNextEvent", SYSTEM.ADR(XNextEvent));
	getSymAdr (libX11, "XPending", SYSTEM.ADR(XPending));
	getSymAdr (libX11, "XLookupString", SYSTEM.ADR(XLookupString));
	getSymAdr (libX11, "XCreateImage", SYSTEM.ADR(XCreateImage));
	getSymAdr (libX11, "XPutImage", SYSTEM.ADR(XPutImage));
	getSymAdr (libX11, "XOpenDisplay", SYSTEM.ADR(XOpenDisplay));
	getSymAdr (libX11, "XConnectionNumber", SYSTEM.ADR(XConnectionNumber));
END screen.
