MODULE xgraph;     (* connect to libX11 *)
(*
	X11 documentation in:
	- http://tronche.com/gui/x/xlib/        an X11 reference
	- http://www.sbin.org/doc/Xlib          an X11 tutorial (this domain has disappeared)
*)

IMPORT 
	SYSTEM, 
	unix, 
	out,
	mScr := screen,
	mWin := window,
	mEvn := event;

CONST
		InputOutput = 1;
		StructureNotifyMask = 20000H;  (* input event mask *)
		ExposureMask = 8000H; KeyPressMask = 1; KeyReleaseMask = 2;
		ButtonPressMask = 4; ButtonReleaseMask = 8; (* PointerNotionMask *)
		ZPixmap = 2;
		Expose = 12;  (* X event type *) ConfigureNotify = 22; KeyPress = 2; ButtonPress = 4;

		EventTimeOut* = 80;    (* 0, 0, 0, 0 *)
		EventResize* = 81;    (* 0, w, h, 0 *)
		EventKeyPressed* = 82;    (* isPrintable, keyCode (X11 scan code), state, keySym (ASCII) *)
		EventKeyReleased* = 83;    (* 0, keyCode, state, 0 *)
		EventButtonPressed* = 84;    (* button, x, y, state *)
		EventButtonReleased* = 85;    (* button, x, y, state *)
			(* mouse button 1-5 = Left, Middle, Right, Scroll wheel up, Scroll wheel down *)

		bit64 = ORD(unix.BIT_DEPTH = 64);



VAR
	screen* : mScr.TScreen;
	win* :mWin.TWindow;

PROCEDURE createWindow* (w, h :INTEGER);
	VAR
		eventMask :INTEGER;
		winNumber :INTEGER;
	BEGIN
		IF (w > screen.width) OR (h > screen.height) THEN
			out.str ("error: X11.createWindow: window too large"); out.exit(1);
		END;
		ASSERT ((w >= 0) & (h >= 0));
		winNumber := mScr.XCreateWindow(screen.display, mScr.XDefaultRootWindow (screen.display), 0, 0, w, h, 0,
							mScr.XDefaultDepth (screen.display, screen.screen), InputOutput, mScr.XDefaultVisual (screen.display, screen.screen), 0, 0);
		
		win := mWin.New(w, h, winNumber);
		eventMask := StructureNotifyMask + ExposureMask + KeyPressMask + ButtonPressMask;
		mScr.XSelectInput (screen.display, win.number, eventMask);
		mScr.XMapWindow (screen.display, win.number);
	END createWindow;

PROCEDURE Begin*;
	BEGIN 
		mScr.Begin(screen)
	END Begin;

PROCEDURE End*;
	BEGIN 
		mScr.End(screen);
		mScr.XPutImage(screen.display, win.number, screen.gc, screen.surface, 0, 0, 0, 0, win.width, win.height);
		mScr.PaintingReset(screen)
	END End;


PROCEDURE readInt (e :mEvn.TEventX; i :INTEGER) :INTEGER;
        (* treat XEvent byte array as int array *)
	VAR n :INTEGER;
	BEGIN
			ASSERT (i >= 0);
			ASSERT (i < 48);
			i := i * 4;
			n := e.val[i+3]*1000000H + e.val[i+2]*10000H + e.val[i+1]*100H + e.val[i];
	RETURN n
	END readInt;


PROCEDURE nextEvent* (msTimeOut :INTEGER; VAR ev :mEvn.EventPars);
	VAR _type, n, ri :INTEGER;
		event :mEvn.TEventX;
		x, y, w, h :INTEGER;
		timeout :unix.timespec;
	BEGIN
		(* 
			struct XEvent (64-bit):
				any:   4 type   8 serial   4 send_event   8 mScr.Display(screen)   8 window   8 window
				expose:   40 any   4 x, y, w, h, count
				xconfigure:   48 any   4 x, y, w, h
				xkey / xbutton / xmotion:   48 any   8 sub_window   8 time_ms   4 x, y, x_root, y_root   4 state   4 keycode/button
		*)

		(*
			struct XEvent (32-bit):
				any:   4 type   4 serial   4 send_event   4 mScr.Display(screen)   4 window
				expose:   20 any   4 x, y, w, h, count
				xconfigure:   24 any   4 x, y, w, h
				xkey / xbutton / xmotion:   24 any   4 sub_window   4 time_ms   4 x, y, x_root, y_root   4 state   4 keycode/button
		*)
		_type := 0;
		WHILE _type = 0 DO
			IF (msTimeOut > 0) & (mScr.XPending(screen.display) = 0) THEN
				timeout.tv_sec := msTimeOut DIV 1000;
				timeout.tv_usec := (msTimeOut MOD 1000) * 1000;
				ri := unix.select (screen.connectionNr + 1, screen.readX11, NIL, NIL, timeout);
				ASSERT (ri # -1);
				IF ri = 0 THEN
					_type := EventTimeOut; ev[1] := 0;
					ev[2] := 0;
					ev[3] := 0;
					ev[4] := 0
				END;
			END;
			IF _type = 0 THEN
				mScr.XNextEvent (screen.display, SYSTEM.ADR(event));
				CASE readInt (event, 0) OF
					Expose :
						x := readInt (event, 5 + 5 * bit64);
						y := readInt (event, 6 + 5 * bit64);

						w := readInt (event, 7 + 5 * bit64);
						h := readInt (event, 8 + 5 * bit64);

						mScr.XPutImage (screen.display, win.number, screen.gc, screen.surface, x, y, x, y, w, h);
					| ConfigureNotify :
						w := readInt (event, 8 + 6 * bit64);
						h := readInt (event, 9 + 6 * bit64);

						IF (w # win.width) & (h # win.height) THEN
							ASSERT ((w >= 0) & (h >= 0));
							IF w > screen.width THEN
								w := screen.width
							END;
							IF h > screen.height THEN
								h := screen.height
							END;

							mWin.WidthSet(win, w);
							mWin.HeightSet(win, h);

							ev[0] := EventResize;
							ev[1] := 0;
							ev[2] := w;
							ev[3] := h;
							ev[4] := 0;
						END;
					| KeyPress :
						_type := EventKeyPressed;
						x := mScr.XLookupString (SYSTEM.ADR(event), 0, 0, SYSTEM.ADR(n), 0);  (* KeySym *)
						IF (n = 8) OR (n = 10) OR (n >= 32) & (n <= 126) THEN
							ev[1] := 1
						ELSE
							ev[1] := 0; n := 0
						END;  (* isprint *)
						ev[2] := readInt (event, 13 + 8 * bit64); (* keycode *)
						ev[3] := readInt (event, 12 + 8 * bit64); (* state *)
						ev[4] := n;  (* KeySym *)
					| ButtonPress :
						_type := EventButtonPressed;
						ev[1] := readInt (event, 13 + 8 * bit64); (* button *)
						ev[2] := readInt (event, 8 + 8 * bit64);  (* x *)
						ev[3] := readInt (event, 9 + 8 * bit64);  (* y *)
						ev[4] := readInt (event, 12 + 8 * bit64); (* state *)
				ELSE
				END
			END
		END;
		ev[0] := _type
	END nextEvent;


PROCEDURE Fill* (color :INTEGER);   (* fill window area with color *)
	BEGIN
		mWin.Fill(win, color, screen.base, screen.stride)
	END Fill;

PROCEDURE Finish*;
	BEGIN 
		mScr.Finish(screen)
	END Finish;

(*
	PROCEDURE blitError (stride, x, y, w, h :INTEGER);
		BEGIN
				  o.formatInt ("error: screen.blit (src, %)", stride);
				  o.formatInt2 (", %, %", x, y);
				  o.formatInt2 (", %, %) out of bounds", w, h); o.nl;
				  ASSERT (FALSE)
		END blitError;

	PROCEDURE blit* (src, srcStride, x, y, w, h :INTEGER);
	VAR dstStride, p :INTEGER;
	BEGIN
			  IF (x < 0) OR (y < 0) THEN blitError (srcStride, x, y, w, h) END;
			  IF (w <= 0) OR (h <= 0) THEN blitError (srcStride, x, y, w, h) END;
			  IF (x + w > ScreenWidth) OR (y + h > ScreenHeight) THEN blitError (srcStride, x, y, w, h) END;

			  dstStride := ScreenWidth - w;
			  p := ScreenBase + y * ScreenWidth + x * 4;
			  REPEAT
						 SYSTEM.COPY (src, p, w);
						 INC (src, srcStride); INC (p, dstStride); DEC (h)
			  UNTIL h = 0
	END blit;
*)

(*
	PROCEDURE setPixel* (x, y, color :INTEGER);
	VAR p :INTEGER;
	BEGIN
			  ASSERT ((x >= 0) & (x < ScreenWidth) & (y >= 0) & (y < ScreenHeight));
			  screenBegin; p := base + (y*ScreenWidth + x)*4; SYSTEM.PUT32 (p, color); p := p + 4 screenEnd
	END setPixel;
*)

(*
	PROCEDURE loop;    (* example main loop *)
	VAR e :EventPars;
			  stop :BOOLEAN;
	BEGIN
			  createWindow (200, 200);
			  stop := FALSE;
			  REPEAT
						 nextEvent (0, e);
						 IF e[0] = EventKeyPressed THEN stop := TRUE END;
			  UNTIL stop;
			  XCloseDisplay (display);
	END loop;
	*)


BEGIN 
	screen := mScr.New();
END xgraph.
